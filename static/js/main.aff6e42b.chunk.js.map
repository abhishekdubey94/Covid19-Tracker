{"version":3,"sources":["components/TitleBar/coronavirus.svg","components/SearchBox/SearchBox.js","components/Card/Card.js","components/ResultCard/ResultCard.js","components/TitleBar/TitleBar.js","components/CountryName/CountryName.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","className","onChange","this","props","onSearch","type","onClick","onSearchPressed","React","Component","Card","totalNumber","newAdded","title","color","String","ResultCard","worldCases","TotalConfirmed","TotalRecovered","TotalDeaths","NewConfirmed","NewRecovered","NewDeaths","TitleBar","alt","src","coronavirus","style","width","CountryName","display","justifyContent","App","event","setState","country","target","value","console","log","state","countriesCases","fetch","then","response","json","data","Global","Countries","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,yC,8PCc5BC,G,6KATb,OACA,yBAAKC,UAAU,aACd,2BAAOC,SAAUC,KAAKC,MAAMC,SAAUC,KAAK,SAC3C,4BAAQC,QAASJ,KAAKC,MAAMI,gBAAiBP,UAAU,kEAAvD,e,GALqBQ,IAAMC,YCgBfC,G,6KAZL,IAAD,EACoCR,KAAKC,MAAzCQ,EADA,EACAA,YAAYC,EADZ,EACYA,SAASC,EADrB,EACqBA,MAAMC,EAD3B,EAC2BA,MAClC,OACC,yBAAKd,UAAW,qCAAsCc,GACrD,4BAAKD,GACL,4BAAKE,OAAOJ,IACZ,4BAAK,IAAIC,Q,GAVMJ,IAAMC,YCeVO,G,6KAbL,IAAD,EACiFd,KAAKC,MAAMc,WAA5FC,EADA,EACAA,eAAeC,EADf,EACeA,eAAeC,EAD9B,EAC8BA,YAAYC,EAD1C,EAC0CA,aAAaC,EADvD,EACuDA,aAAaC,EADpE,EACoEA,UAC3E,OACA,yBAAKvB,UAAU,iBACd,kBAAC,EAAD,CAAMW,YAAaO,EAAgBN,SAAUS,EAAcP,MAAM,UAAUD,MAAM,cACjF,kBAAC,EAAD,CAAMF,YAAaO,EAAeC,EAAeC,EAAaR,SAAUS,EAAaC,EAAaC,EAAWT,MAAM,UAAUD,MAAM,WACnI,kBAAC,EAAD,CAAMF,YAAaQ,EAAgBP,SAAUU,EAAcR,MAAM,WAAWD,MAAM,cAClF,kBAAC,EAAD,CAAMF,YAAaS,EAAaR,SAAUW,EAAWT,MAAM,cAAcD,MAAM,kB,GARzDL,IAAMC,Y,wBCWhBe,E,uKATb,OACA,yBAAKxB,UAAU,oBACb,yBAAKyB,IAAI,cAAcC,IAAKC,IAAcC,MAAO,CAACC,MAAM,WACrD,wBAAI7B,UAAU,SAAd,0B,GALgBQ,IAAMC,WCOdqB,E,uKANd,OAAO,yBAAKF,MAAO,CAACG,QAAQ,OAAQC,eAAe,UAAWhC,UAAU,OACvE,0C,GAJwBQ,IAAMC,WC8CjBwB,G,wDArCb,aAAc,IAAD,8BACZ,gBAgBF7B,SAAW,SAAC8B,GACV,EAAKC,SAAS,CAACC,QAAQF,EAAMG,OAAOC,SAlBxB,EAqBd/B,gBAAkB,WACjBgC,QAAQC,IAAI,EAAKC,MAAML,UApBtB,EAAKK,MAAM,CACZxB,WAAW,GACXyB,eAAe,GACfN,QAAQ,IALK,E,gEASO,IAAD,OAClBO,MAAM,sCAAsCC,MAAK,SAAAC,GAChD,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACP,EAAKZ,SAAS,CAAClB,WAAW8B,EAAKC,OAAON,eAAeK,EAAKE,iB,+BAa5D,OACC,6BACO,kBAAC,EAAD,MACH,kBAAC,EAAD,CAAW7C,SAAUF,KAAKE,SAAUG,gBAAiBL,KAAKK,kBAC1D,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYU,WAAYf,KAAKuC,MAAMxB,kB,GAjCxBT,IAAMC,Y,MCGJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.aff6e42b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronavirus.e326018f.svg\";","import React from 'react';\nimport './SearchBox.css';\n\nclass SearchBox extends React.Component{\n\trender(){\n\t\treturn(\n\t\t<div className=\"searchBox\">\n\t\t\t<input onChange={this.props.onSearch} type='text'/>\n\t\t\t<button onClick={this.props.onSearchPressed} className='ml3 f6 link dim br3 ph3 pv2 mb1 dib white bg-dark-blue pointer'>Search</button>\n\t\t</div>\n\t\t);\n\t}\t\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Card.css'\n\nclass Card extends React.Component{\n\t/*constructor(props){\n\t\tsuper(props);\n\t}*/\n\trender(){\n\t\tconst {totalNumber,newAdded,title,color} = this.props;\n\t\treturn(\n\t\t\t<div className={'pa3 ma4 shadow-3 card br4 tc grow '+ color}>\n\t\t\t\t<h1>{title}</h1>\n\t\t\t\t<h1>{String(totalNumber)}</h1>\n\t\t\t\t<h4>{\"+\"+newAdded}</h4>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Card/Card'\nimport './ResultCard.css'\n\nclass ResultCard extends React.Component{\n\trender(){\n\t\tconst {TotalConfirmed,TotalRecovered,TotalDeaths,NewConfirmed,NewRecovered,NewDeaths} = this.props.worldCases;\n\t\treturn(\n\t\t<div className='ac resultCard'>\n\t\t\t<Card totalNumber={TotalConfirmed} newAdded={NewConfirmed} color=\"bg-blue\" title='Confirmed'/>\n\t\t\t<Card totalNumber={TotalConfirmed-TotalRecovered-TotalDeaths} newAdded={NewConfirmed-NewRecovered-NewDeaths} color=\"bg-gold\" title='Active'/>\n\t\t\t<Card totalNumber={TotalRecovered} newAdded={NewRecovered} color=\"bg-green\" title='Recovered'/>\n\t\t\t<Card totalNumber={TotalDeaths} newAdded={NewDeaths} color=\"bg-dark-red\" title='Deceased'/>\n\t\t</div>\n\t\t);\n\t}\t\n}\n\nexport default ResultCard;","import React from 'react';\nimport './TitleBar.css';\nimport coronavirus from './coronavirus.svg';\n\nclass TitleBar extends React.Component{\n\trender(){\n\t\treturn(\n\t\t<div className='titleBar ma3 pa3'>\n\t\t  <img alt=\"coronaImage\" src={coronavirus}  style={{width:'100px'}}/>\n\t      <h1 className='title'> COVID-19 Tracker</h1>\n\t\t</div>\n\t\t);\n\t}\t\n}\n\nexport default TitleBar;","import React from 'react';\n\nclass CountryName extends React.Component {\n\t\n\trender(){\n\treturn(<div style={{display:'flex', justifyContent:'center'}} className='mt4'>\n\t\t<h1>WORLD</h1>\n\t</div>);\n\t}\n}\n\nexport default CountryName;","import React from 'react';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport ResultCard from './components/ResultCard/ResultCard';\nimport TitleBar from './components/TitleBar/TitleBar';\nimport CountryName from './components/CountryName/CountryName';\n/*import Particles from 'react-particles-js';*/\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n  \tsuper();\n  \tthis.state={\n\t\tworldCases:{},\n\t\tcountriesCases:{},\n\t\tcountry:\"\"\n  \t}\n  }\n\n  componentDidMount(){\n  \tfetch('https://api.covid19api.com/summary').then(response=>{\n  \t\treturn response.json();\n  \t}).then(data =>{\n  \t\tthis.setState({worldCases:data.Global,countriesCases:data.Countries})\n  \t});\n  }\n\n onSearch = (event)=>{\n  \tthis.setState({country:event.target.value});\n  }\n\n onSearchPressed = () =>{\n \tconsole.log(this.state.country);\n }\n\n  render(){\n  return (\n   <div>\n          <TitleBar />\n\t      <SearchBox onSearch={this.onSearch} onSearchPressed={this.onSearchPressed}/>\n\t      <CountryName />\n\t      <ResultCard worldCases={this.state.worldCases}/>\n      </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}